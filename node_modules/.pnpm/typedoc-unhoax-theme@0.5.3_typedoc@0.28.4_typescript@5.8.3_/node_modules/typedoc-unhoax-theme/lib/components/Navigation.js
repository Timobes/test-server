import { JSX } from 'typedoc';
import { ChevronDownIcon } from '../icons/chevron-down.js';
import { KindIcon } from './KindIcon.js';
export function Navigation({ context, currentUrl, props }) {
    const basePath = context.options.getValue('basePath') || '/';
    const urlToProject = context.urlTo(props.project);
    const projectIsCurrentPage = currentUrl === urlToProject;
    const elements = context.getNavigation();
    return (JSX.createElement("nav", { class: 'project-nav' },
        JSX.createElement("a", { href: urlToProject, class: ['nav-leaf', projectIsCurrentPage ? 'is-active' : undefined].filter(Boolean).join(' ') }, "Modules"),
        JSX.createElement("ul", { class: 'nav-tree' }, elements.map(navTreeItem))));
    function navTreeItem(element) {
        return element.children ? (JSX.createElement(NavTreeItem, { defaultOpened: hasOpenedElement(element, currentUrl), text: element.text, children: element.children.map(navTreeItem) })) : (JSX.createElement(NavTreeLeaf, { customIcons: context.customIcons, isActive: currentUrl === element.path, text: element.text, kind: element.kind, link: element.path && context.relativeURL(element.path) }));
    }
}
export function NavTreeItem(props) {
    if (!props.text)
        return null;
    return (JSX.createElement("li", null,
        JSX.createElement("details", { class: 'nav-accordion', open: props.defaultOpened },
            JSX.createElement("summary", null,
                JSX.createElement("span", null, props.text),
                JSX.createElement(ChevronDownIcon, null)),
            JSX.createElement("ul", { class: 'nav-tree' }, props.children))));
}
export function NavTreeLeaf(props) {
    if (!props.text)
        return null;
    const icon = props.kind && props.customIcons[props.kind]?.();
    const kindIcon = !icon && props.kind && (JSX.createElement("small", null,
        JSX.createElement(KindIcon, { kind: props.kind })));
    const className = [props.class, 'nav-leaf', props.isActive ? 'is-active' : undefined].filter(Boolean).join(' ');
    return (JSX.createElement("li", null, props.link ? (JSX.createElement("a", { class: className, href: props.link },
        icon,
        JSX.createElement("span", null, props.text),
        kindIcon)) : (JSX.createElement("span", { class: className },
        icon,
        JSX.createElement("span", null, props.text),
        kindIcon))));
}
function hasOpenedElement(element, url) {
    return element.path === url || !!element.children?.some((element) => hasOpenedElement(element, url));
}
