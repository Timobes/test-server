import { i18n, JSX } from 'typedoc';
import { hasTypeParameters } from '../utils.js';
import { SignatureParameter } from './SignatureParameter.js';
export function MemberSignatureBody({ context, props, hideSources = false }) {
    const returnsTag = props.comment?.getTag('@returns');
    return (JSX.createElement(JSX.Fragment, null,
        context.reflectionFlags(props),
        context.commentSummary(props),
        hasTypeParameters(props) && context.typeParameters(props.typeParameters),
        props.parameters && props.parameters.length > 0 && (JSX.createElement("div", { class: 'parameters' },
            JSX.createElement("h4", null, i18n.kind_plural_parameter()),
            JSX.createElement("ul", { class: 'parameter-list' }, props.parameters.map((item) => (JSX.createElement("li", null,
                JSX.createElement(SignatureParameter, { context: context, item: item }),
                context.commentSummary(item),
                context.commentTags(item),
                context.typeDetailsIfUseful(item, item.type))))))),
        props.type && (JSX.createElement(JSX.Fragment, null,
            JSX.createElement("h4", { class: 'tsd-returns-title' },
                i18n.theme_returns(),
                " ",
                context.type(props.type)),
            returnsTag && JSX.createElement(JSX.Raw, { html: context.markdown(returnsTag.content) }),
            context.typeDetailsIfUseful(props, props.type))),
        context.commentTags(props),
        !hideSources && context.memberSources(props)));
}
