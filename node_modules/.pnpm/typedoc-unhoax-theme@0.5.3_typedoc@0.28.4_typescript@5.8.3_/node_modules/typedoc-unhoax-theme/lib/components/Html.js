import { JSX, ReflectionKind } from 'typedoc';
import path from 'node:path';
export function Html({ context, template, props }) {
    const favicon = context.options.getValue('favicon');
    const relativeToRoot = path.relative(process.cwd(), context.options.getValue('basePath'));
    const basePath = '/' + relativeToRoot + (relativeToRoot.endsWith('/') ? '' : '/');
    return (JSX.createElement("html", { lang: context.options.getValue('lang') },
        JSX.createElement("head", null,
            JSX.createElement("meta", { charset: 'utf-8' }),
            JSX.createElement("meta", { name: 'description', content: 'Documentation for ' + context.projectDisplayName }),
            JSX.createElement("meta", { name: 'viewport', content: 'width=device-width, initial-scale=1' }),
            context.hook('head.begin', context),
            JSX.createElement("meta", { "http-equiv": 'x-ua-compatible', content: 'IE=edge' }),
            JSX.createElement("title", null, props.model.isProject() ? context.projectDisplayName : props.model.getFriendlyFullName()),
            favicon && (JSX.createElement("link", { rel: 'icon', href: favicon })),
            JSX.createElement(JsonLdScript, { context: context }),
            JSX.createElement("link", { rel: 'stylesheet', href: context.relativeURL('assets/highlight.css', true) }),
            context.options.getValue('customCss') && (JSX.createElement("link", { rel: 'stylesheet', href: context.relativeURL('assets/custom.css', true) })),
            context.options.getValue('customJs') && (JSX.createElement("script", { defer: true, src: context.relativeURL('assets/custom.js', true) })),
            context.hook('head.end', context)),
        JSX.createElement("body", null,
            context.hook('body.begin', context),
            context.toolbar(props),
            JSX.createElement("input", { id: 'mobile-nav-opened', type: 'checkbox', hidden: true }),
            JSX.createElement("div", { class: 'page-layout' },
                JSX.createElement("aside", { class: 'site-nav-wrapper' },
                    JSX.createElement("div", { class: 'site-nav' },
                        context.hook('sidebar.begin', context),
                        context.sidebar(props),
                        context.hook('sidebar.end', context))),
                JSX.createElement("aside", { class: 'page-toc-wrapper' },
                    JSX.createElement("div", { class: 'page-toc' },
                        context.hook('pageSidebar.begin', context),
                        context.pageSidebar(props),
                        context.hook('pageSidebar.end', context))),
                JSX.createElement("main", { class: 'page-content' },
                    context.hook('content.begin', context),
                    context.header(props),
                    template(props),
                    context.hook('content.end', context))),
            context.footer(),
            JSX.createElement("div", { class: 'overlay' }),
            context.hook('body.end', context),
            JSX.createElement("script", null,
                JSX.createElement(JSX.Raw, { html: `window.ReflectionKind=${JSON.stringify(ReflectionKind)}\n` }),
                JSX.createElement(JSX.Raw, { html: `window.basePath=${JSON.stringify(basePath)}` })),
            JSX.createElement("script", { type: 'module', src: context.relativeURL('assets/init-app.js', true) }))));
}
function JsonLdScript({ context }) {
    const hostedBaseUrl = context.options.getValue('hostedBaseUrl');
    if (context.page.url !== 'index.html')
        return null;
    if (!hostedBaseUrl)
        return null; // cannot indicate where the site is.
    return (JSX.createElement("script", { type: 'application/ld+json' },
        JSX.createElement(JSX.Raw, { html: JSON.stringify({
                '@context': 'https://schema.org',
                '@type': 'WebSite',
                'name': context.page.project.name,
                'url': hostedBaseUrl,
            }) })));
}
