import { JSX, ReferenceReflection } from 'typedoc';
import { KindIcon } from './KindIcon.js';
import { AnchorIconLink } from './AnchorIconLink.js';
export function MemberSummary({ context, member }) {
    const targetElementId = context.slugger.slug(member.name);
    const target = member instanceof ReferenceReflection ? member.getTargetReflectionDeep() : undefined;
    context.page.pageHeadings.push({
        link: `#${targetElementId}`,
        text: member.getFriendlyFullName(),
        kind: target?.kind ?? member.kind,
        classes: context.getReflectionClasses(member),
    });
    const className = `member-summary ${context.getReflectionClasses(member)}`;
    return (JSX.createElement(JSX.Fragment, null,
        JSX.createElement("dt", { class: className },
            JSX.createElement("a", { id: targetElementId, class: 'anchor' }),
            target ? (JSX.createElement(ReferenceMemberName, { target: target, anchor: targetElementId, context: context, member: member })) : (JSX.createElement("span", { class: 'member-summary-name' },
                context.customIcons[member.kind]?.() || (JSX.createElement("small", null,
                    JSX.createElement(KindIcon, { kind: member.kind }))),
                JSX.createElement("a", { class: member.isDeprecated() ? 'deprecated' : undefined, href: context.urlTo(member) }, member.name),
                JSX.createElement(AnchorIconLink, { context: context, anchor: targetElementId })))),
        JSX.createElement("dd", { class: className }, context.commentShortSummary(member))));
}
function ReferenceMemberName({ context, member, anchor, target }) {
    return (JSX.createElement("span", { class: 'member-summary-name' },
        context.icons[target.kind](),
        JSX.createElement("span", { class: member.isDeprecated() ? 'deprecated' : undefined }, member.name),
        JSX.createElement("span", null,
            "\u00A0",
            '\u2192',
            "\u00A0"),
        target.getFriendlyFullName(),
        JSX.createElement(AnchorIconLink, { context: context, anchor: anchor })));
}
